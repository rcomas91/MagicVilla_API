using AutoMapper;
using MagicVilla_API.Data;
using MagicVilla_API.Models;
using MagicVilla_API.Models.Dto;
using MagicVilla_API.Repository.IRepository;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace MagicVilla_API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class VillaController : ControllerBase
    {

        private readonly ILogger<VillaController> _logger;
        private readonly IVillaRepositorio _villaRepo;
        private readonly IMapper _mapper;

        public VillaController(ILogger<VillaController> logger, IVillaRepositorio villaRepo,IMapper mapper)
        {
            _logger = logger;
            _villaRepo = villaRepo;
            _mapper = mapper;
        }
        [HttpGet]
        public async Task<ActionResult<IEnumerable<VillaDto>>> GetVillas()
        {
            _logger.LogInformation("Obtain all villages");
            //The comments from document are for work with localstorage
            //return Ok(VillaStore.villaList);
            IEnumerable<Villa> villaList = await _villaRepo.GetAll();
            return Ok(_mapper.Map<IEnumerable<VillaDto>>(villaList));
        }

        [HttpGet("id:int", Name = "GetVilla")]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<VillaDto>> GetVilla(int id)
        {
            if (id == 0)
            {
                _logger.LogError("Error with village id");
                return BadRequest();
            }
            //var villa = VillaStore.villaList.FirstOrDefault(v => v.Id == id);
            var villa = await _villaRepo.Get(v => v.Id == id);

            if (villa == null)
            {
                return NotFound();
            }
            return Ok(_mapper.Map<VillaDto>(villa));
        }

        [HttpPost]
        [ProducesResponseType(201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<VillaDto>> CreateVilla([FromBody] VillaCreateDTO createDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            // if (VillaStore.villaList.FirstOrDefault(v => v.Name.ToLower() == villaDto.Name.ToLower()) != null)
            if (await _villaRepo.Get(v => v.Name.ToLower() == createDto.Name.ToLower()) != null)
            {
                ModelState.AddModelError("NameExist", "The village with this name exist");
                return BadRequest(ModelState);
            }
            if (createDto == null)
            {
                return BadRequest();
            }
            // Delete when we separate VillaCreateDto and VillaUpdateDto
            //if (villaDto.Id > 0)
            //{
            //    return StatusCode(StatusCodes.Status500InternalServerError);
            //}

            //villaDto.Id = VillaStore.villaList.OrderByDescending(v => v.Id).FirstOrDefault().Id + 1;
            //VillaStore.villaList.Add(villaDto);
            Villa model= _mapper.Map<Villa>(createDto);

            //When dot not use Automapper
            //Villa model = new()
            //{
            //    Name = villaDto.Name,
            //    Detail = villaDto.Detail,
            //    ImageUrl = villaDto.ImageUrl,
            //    Ocupants = villaDto.Ocupants,
            //    Price = villaDto.Price,
            //    MetersCuadrados = villaDto.MetersCuadrados,
            //    Amenity = villaDto.Amenity,
            //};
           await _villaRepo.Create(model);
            return CreatedAtRoute("GetVilla", new { id = model.Id }, model);
        }
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [HttpDelete("{id:int}")]
        public async Task<IActionResult> DeleteVilla(int id)
        {
            if (id == 0)
            {
                return BadRequest();
            }
            // var villa = VillaStore.villaList.FirstOrDefault(v => v.Id == id);
            var villa = await _villaRepo.Get(v => v.Id == id);
            if (villa == null)
            {
                return NotFound();
            }
            //VillaStore.villaList.Remove(villa);
            await _villaRepo.Remove(villa);
            return NoContent();
        }
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [HttpPut("{id:int}")]
        public async Task<IActionResult> UpdateVilla(int id, [FromBody] VillaUpdateDto updateDto)
        {
            if (updateDto == null || id != updateDto.Id)
            {
                return BadRequest();
            }
            //var villa = VillaStore.villaList.FirstOrDefault(v => v.Id == id);
            //villa.Name = villaDto.Name;
            //villa.Ocupants = villaDto.Ocupants;
            //villa.MetersCuadrados = villaDto.MetersCuadrados;
            Villa model =_mapper.Map<Villa>(updateDto);

            // Without Automapper
            //Villa model = new()
            //{
            //    Id = villaDto.Id,
            //    Name = villaDto.Name,
            //    Detail = villaDto.Detail,
            //    ImageUrl = villaDto.ImageUrl,
            //    Ocupants = villaDto.Ocupants,
            //    Price = villaDto.Price,
            //    MetersCuadrados = villaDto.MetersCuadrados,
            //    Amenity = villaDto.Amenity,
            //};
            await _villaRepo.Update(model);
            return NoContent();


        }


    }
}
